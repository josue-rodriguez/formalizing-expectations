
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(foreach)
> library(doParallel)
Loading required package: iterators
Loading required package: parallel
> library(doSNOW)
Loading required package: snow

Attaching package: 'snow'

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, clusterSplit, makeCluster, parApply,
    parCapply, parLapply, parRapply, parSapply, splitIndices,
    stopCluster

> 
> ncores <- detectCores()
> cl <- makeCluster(ncores)
> registerDoSNOW(cl)
> 
> #================
> # Set up data
> #===============
> 
> # precision matrix
> lower_tri_k <- -seq(0.01, 0.15, length.out = 6)
> 
> k <- diag(4)
> k[lower.tri(k)] <- lower_tri_k
> k[upper.tri(k)] <- t(k)[upper.tri(k)]
> 
> # hypotheses, with increasing number of constraints
> hypothesis <- c("2--4 > 2--3 > 1--4 > 1--3 > 1--2")
> 
> #=============
> # Simulation
> #============
> 
> # helper function
> sim_function <- function(n, precision, hyp, prior_sd) {
+   generated_data <- bdgraph.sim(n = n, K = precision)$data
+   test_hyp <- confirm(generated_data, hypothesis = hyp, prior_sd = prior_sd)
+   return(test_hyp)
+ }
> 
> 
> # parameters to iterate through
> N <- seq(100, 1500, by = 100)
> prior_sd <- seq(0.2, 0.5, by = 0.1)
> iter <- 500
> 
> # data.frame to store results
> results <- data.frame()
> 
> # set progress bar
> total_iter <- length(N) * length(prior_sd) * iter
> pb <- txtProgressBar(max = total_iter, style = 3)
  |                                                                              |                                                                      |   0%> progress <- function(n) setTxtProgressBar(pb, n)
> opts <- list(progress = progress)
> 
> # begin simulation
> t0 <- Sys.time()
> 
> # ------ begin core simulation ---------------- |
> results <- foreach(n = N,
+                    .combine = rbind,
+                    .options.snow = opts) %:%
+   foreach(s = prior_sd,
+           .combine = rbind) %:%
+   foreach(icount(iter),
+           .combine = rbind,
+           .packages = c("BGGM", "BDgraph")) %dopar% {
+             
+             sim <- sim_function(n = n, 
+                                 precision = k, 
+                                 hyp = hypothesis,
+                                 prior_sd = s)
+             # pmp <- sim$post_prob
+             h12 <- sim$post_prob[[1]]
+             
+             pmp_list <- c(h12 = h12, 
+                           n   = n,
+                           sd  = s)
+             
+             return(pmp_list)
+             
+           }
